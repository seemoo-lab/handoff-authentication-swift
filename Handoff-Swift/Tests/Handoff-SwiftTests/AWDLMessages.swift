//
//  AWDLMessages.swift
//  Handoff-Swift
//
//  Created by Alexander Heinrich on 25.07.19.
//  Copyright Â© 2019 Alexander Heinrich. All rights reserved.
//

import Foundation

struct AWDLMesssages {
    static func tcp_tls_packets() -> [String : [ContinuityPacket]]{
        let rawPackets = [
            "Data":[ "2ea7836a42278a859597487d86dd602248b6037f0640fe80000000000000888595fffe97487dfe800000000000002ca783fffe6a4227d7bbca5a26ca33228d59f05980180801f38400000101080a078aaf4609843efc0800035b3f63b1f61362a9b80a672af600eb531b4c03d6a04244723a20d52f010707789f37cda0d4a46890fc878f15b3a69de3c7e13b957bf0ae79d26c53a923b9af096bb10e0eb2fc31dac380f3cc2c2baf3444a9522e198f4609fc2dd0ce068be94a183deed6e8a18c23227abeaa90df813457e55b70f246ad7f2213d3eba2f59254177c74bcc5057c1c4b6115ef254e698662e3e62d3848e65a80cd8c2e8c8558f1cbf2066f11638819f2f613a194d3057815a71c2605582953fd656a42fae147a6465ac965d0658c856df066dac1dc5f2f14adabc53a7585579b7242bc139dade827117cc11a559466c0afc3eefd844191c0c8c7226bf194484ec0b1e2fd587ceeb3a1a96f6b10c5b7220348f7ad81d16f4afcb31aca0b6b0c3e0e6fc9eea6b59c0420bb68ef98b7d019be8828c6703b053bb56940a72c9e0436bff57f2be6d0795f898a29d75ef53600b139703f30ff693fdbcdb792f69960a845f0a522e9acad6a223048739bdbb53819a1739dd6c8d20febf79166a8a3c49b1f620fce2f7e4c01722f9811ae8fe3b7fdd05df4699fda86aac946d17eb7c6bb03e5290f80e8ad636b1deb1403cef335b82b27a8d6a1092cae5316c30cefa6f73a2338bf3eef86488330333b644af97f4981176afa898716b6391dc3c4e7142c2771568e8ca749ee9a9c1538a9a9f4ed845894b7cb1f1ea619c4f9c2ce7e2874f771903a7b71ddc18a844a75001e0085dc7e91e30357d040b5c9fb3193c98b104f80d9825052dcba96645c905bb9243bfee8b5c274a16f94171e86d41c41edaea84e8423e534da9c904f5b9bb66aeca39ca0f65befa862553544ba31e3550868567ca3e76fe8f33d52244175221935a45be186985fa320df01d06428aa6066565baf7e9e01029858b62a8c5a6499bd6dca701c40478bcc4990bbd5821758267617fac9db1c1037872ef19dd1a4008e0b8efdc6e0748e4e7407fff281d8d8cb52e5f35d7a74ebdd61190494b1ce8fa68d496d211bdf43d360cb40a23dad61fc8839934fbfd6c3c7b4be9384b0b61921a08d491f337821c702b1a650529ff5cd6372a0366832413a9eec86869dd45064d7100b0a1e4cfb83f4c1cc41b556aff13550806b9d21d6eeada4eefedd36f6c900f643d1845ab079ce71234a849e1e588b786db148d41af17b817a70c3ea68ba60dd24bac43abf199038dcbe169f6d8357defbb9",
            "8a859597487d2ea7836a422786dd6025900d01010640fe800000000000002ca783fffe6a4227fe80000000000000888595fffe97487dca5ad7bb8d59f05926ca368180180800700600000101080a09843f04078aaf46080000dddb4c0cbf41333ed35d75f16b76811c36cd2bf68930cd225384682db72547ff54cf56f6a7b3d56555517cf66fbf0681d5788e81ead186f5e4176e9721d6edda945ac248d6ce96beb4f1de27f21b74c6c5effc74fffafb6a7faef42b9fa809dcfdf6109906dd51817930174d8ccd3ce2ea25391757779d6d3677ee1faf1433bc61090a85fcf58f9e304c93cac5dd0f3873bf4a28120a6ddd99cfc7e4c30a81f3716dc1e4a90ded01b58d1ae6339a87d0e31017e44e6fdd6435925a66ba031eaa3ed3be360e93a03c0d06ed2a198ac72e191395c101d8b93fdba2707b0a18",
            "2ea7836a42278a859597487d86dd602248b600ce0640fe80000000000000888595fffe97487dfe800000000000002ca783fffe6a4227d7bbca5a26ca36818d59f13a80180800a9aa00000101080a078aaf4909843f04080000aa1c0c8a2b860d331584b27fe66c5d6e44bf64fc65421e73acc526833b070da15359528f93ae38791b977c52c8b68a9a2df351d190b19899e6692e210cc34a71d327b8a9211d6babe5e3d05adc45d975e9f526db515feb33a6faae78bb92d54779cca706caa3c53b02906d4dfcc54f55eb1cb43e599d56e90a5dc840f8eb0301200448de73e695280effa37e5c9a7a1155b3feca6602833f48a30f453ceca71f0c2ad761b0028fb125c07e",
            "8a859597487d2ea7836a422786dd6025900d05a40640fe800000000000002ca783fffe6a4227fe80000000000000888595fffe97487dca5ad7bb8d59f13a26ca372f80100800852200000101080a09843f0f078aaf49080007cda9e9c18b29ccc184407fd180553eb3b5dc7d3c80eb85d65bf03daddd6c4cbd3c1fb36fd17e50da8d688a271631117cc9cd32a1b3c1efceb4e656727f95d1201047e2cf0581b31456d1e3e62d161936fc0fd4d328568bfd159459ca89580b6d978abae0eda81965f9f1e6914399669e7dc83481e68f604ca1860e846d5635e63c7e728c9002f72fcd6455fbf4cb6351e409de2d422a5a0f06687e8bf5102207db23b5c4f28fe1ec5bf7f05dee5ab71fc5dc4614286a73a6e3bb6ace9c1b52d9b2df250c65450c59b82a6097db39a3f4965f4231a81ca956a9e1b9e81bae184f91d1a8acd1e7f897c901e5a403c1f98b6ee138be5fda74f4f478ec1c6bc3029389b1ee1c9e8fd5966c7822b173ff038a58810c8d9ecd87f6d8a2edca3785b2bd0900a8481563033feb6f2dd6e5288aa79354e9f93df0e02548737894fa4513c7b558d405e75708654aa8b7b799ca843bfb93b5920a98829cf581ee5338069c63e06e316802ab65a22f247409148725bfad7b52ab25446264b181052267c731bcbde73c7dd64a6c458a690dcb6ec24c807c9c34c11475ac4fa60c893dc8f0031a73fc2ba520909fceefff315612f31b412062cdb3f437f2f1a12f0149e41c1c44d5806c5fbbbe7bb133594fe04a0c56a8752fa17f483ad1e5e0e603b8237113d7cb4a744d660e49ef1148f211947bf18d1f8afb798bffcde7a4abd72446a9593ce35d308f9346ec695a037b85c5bb809b3b210c60513e154f25350a2f2d6b90dd218cc0f5d2f6f525af31cb666473047456523ab318e1deaa3f6d7419d17d6667a27c70509f23d5ccc898db9f68bf92816d5d1f44f2e0e4c6904038636a7d9fefb200eb781eb68d99d30167d87bad781294d4a7150394a54a07efbf79b5ecbc26157249aa919b5c951a5678f6dbfd0ddb83f8519bf1936612c94801ffbb99344612d58e42ff22423f10947c3037f5bc81dc99bb5e9e67959e514173ce203fb2da193b0267dfbef426d02405e5b129fc70381514774ced7ea3913dd33d397dcf7abe6e4d6c4545510c9a88bc70954047064cd5f11a395f86c9cbd4fd9e5decc3a85fd0d3ac71e4eb317ab1def7052aa4a0a96c445e01f87d6e445fbc432c6e802e95e94c476b058caa02fc2708766a26cb731b81c45d1300a81fd241a7c99d3d7dbbfc566701714c9f225c4e7ab3f99844c4da59ec31a77b079895a064973b0ee4fff5b6459204cb324d3ba23a838f051ec76f826664afc239a827aa02e5dfc997b41a10f04ec60927bdb3e940b262ca7b5cf016ddf751d508990bff256075a5d3efb7deae2295bbd5de2ed81e64f428e66b38ae557224f13be498b31b4cf627b67063c4739af58f06386e90f3098bd893f7cedc0d1824fed2aef3bcc8dc7694996b05259cfdf5fd7f8ff635b032b5663a9c2d59ee20a2cb9c11b4a8d0c06aee93c31bfb905a51e831396eba40d7fce2fc32294aee4ac8a93240eb034f548e60a9a0158872c884593ff5ad6e2f9a6292edf0fafdabff8d647d5a691975cfc3b00c9cb511332f58fa36c4d87c637f7c89bda6942b76cac5853f63ea281e80b4dbcc81fdd08272821e704937b1bc431ae3d64da3ce8727dd573cbfaef3177d91723ac2595d2534441f2b945894d588c538cc53b19f1792b95e63449c6de5edb4bb343f5744e4081527155cfc63409e3d956dd84a6e9bb03e7c85252ab8eaff054a71ce83e4178e85c8d6f5e2ff974ede0b127c8ac3f1b2ec8e79b7266ea695e651c6bd51405a66e3d3dec74a2783bc038bfe3c67f468a8a60a6a7f7e824146e866c37c763afd989e483956e11e0f23d36a1222c7fd7d6c6d9d140130979e4f981fc22e0006a4ba6fd114fd96a2ab4fbb11b189adb07852a83aab3ca0e8e3c54f6affb3ae622464bc6c014c922eb0c4b75fc2bded54ac36d0b23635f7a3851688a61bcad352ca1a4d33ad58aed338033f661a52264d1a2481e8af41fca195e9e473c054"
                +
            "681cd2982ec880d245566785ed5105dbd95b129f8100aea4d06a7261403b545c9eced96199a9b19c5d2d7e5bef84ec5da3cb1c1098b4baea7794796797e9d69631185a1663d6e445aa711fc62a22705b79fe38e45fb97585456cc4f0b71fc713b458b1edfae5fcd46cfc4de515c70a779286b7a403acf3de47c331aad5c36e5b4e7494962783550ded620a23ab215e1392c546f603a15d91a6c8fe8ca398e47786bfef431b6e76f77fa692ff7d58ba26643e0b761a3e26b35204517ca7c4c36e6dfa8cb07014fe1273f3a29ae745ca1791dd88f8296d20ec20ac2e07aaa79811e5b7e54e0e4be4974a86f18ec38e1b2a2735a06fa41753021741aca341b0590fb590113061084fde55bd81d7b08cbbfcbbc405b6a9bab5b1278580cb63ea51a280dda44ed026363f1926095d847d32fc5bbe59cfa36bc9138f3301ddd00dcb4247bd20039643ee218defa4ce6898a193308953d7b9e8181d6c68175be046cd7756761be5f46145e08b37a824a255ae3d91a09a26e0dfd38a8992889b1c679b0e4cc1a87748577b5b1fb82699baba72ef4999384d40ceae5126457d5994b22ac542d8cd3a70a244d68b29542d8ad5ffcb5227b98ae7a6bad4195facb568149270aa4877a54c954b2d16cd48161eae9dffd8e1150373b934771ffa0dbbbb8859dbde8b85773352ababbe2909b4a78fc68efb62f542db31498f1e078847d5d3541715700522300084bea09c4b6da6ef7130b2b7fb7c918b355a0f60079b5db759beb2cba45e19d3cc7fabc616119ee4879a8b19e4206fd97c315989d57d3fde93e6f44b00608d4e9065da04c6ec0f"
            ]
        ]
        
        var parsedPackets = [String: [ContinuityPacket]]()
        for (_, value) in rawPackets {
            let hexArray = value
            var packets = [ContinuityPacket]()
            for hexPacket in hexArray {
                packets.append(try! self.parse(tcpHex: hexPacket))
            }
            parsedPackets["Data"] = packets
        }
        
        return parsedPackets
    }
    
    static func parse(tcpHex: String) throws -> ContinuityPacket {
        let regex = try NSRegularExpression(pattern: "0[1-8]00", options: [])
        
        let start = 150
        let match = regex.firstMatch(in: tcpHex, options: [], range: NSRange(location: start, length: tcpHex.count - start))
        
        if let range = match?.range,
            range.location != NSNotFound {
            //Found the beginning of the packet
            let from = tcpHex.index(tcpHex.startIndex, offsetBy: range.location)
            let packetHex = String(tcpHex[from...])
            let packetData = packetHex.hexadecimal!
            
            return try ContinuityPacket(data: packetData)
        }
        
        throw NSError(domain: "Regex Not found", code: -1, userInfo: nil)
    }
}
